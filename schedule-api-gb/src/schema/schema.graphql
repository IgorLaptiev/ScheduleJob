## NOTE: This schema was generated by Graphback and should not be changed manually

"""Exposes a URL that specifies the behaviour of this scalar."""
directive @specifiedBy(
  """The URL that specifies the behaviour of this scalar."""
  url: String!
) on SCALAR

input BooleanInput {
  ne: Boolean
  eq: Boolean
}

input CreateDayInput {
  date: GraphbackDate
}

input CreateDayScheduleInput {
  date: GraphbackDate
  startTime: GraphbackTime
  endTime: GraphbackTime
  slotLength: GraphbackTime
}

input CreateTimeSlotInput {
  startTime: GraphbackTime
  endTime: GraphbackTime
  note: String
  free: Boolean
  clientName: String
  dateId: GraphbackObjectID
}

""" @model """
type Day {
  _id: GraphbackObjectID!
  date: GraphbackDate

  """
  @oneToMany(field: 'date', key: 'dateId')
  @oneToMany(field: 'date')
  """
  slots(filter: TimeSlotFilter): [TimeSlot]!
}

input DayFilter {
  _id: GraphbackObjectIDInput
  date: GraphbackDateInput
  and: [DayFilter!]
  or: [DayFilter!]
  not: DayFilter
}

type DayResultList {
  items: [Day]!
  offset: Int
  limit: Int
  count: Int
}

input DaySubscriptionFilter {
  and: [DaySubscriptionFilter!]
  or: [DaySubscriptionFilter!]
  not: DaySubscriptionFilter
  _id: GraphbackObjectIDInput
  date: GraphbackDateInput
}

scalar GraphbackDate

input GraphbackDateInput {
  ne: GraphbackDate
  eq: GraphbackDate
  le: GraphbackDate
  lt: GraphbackDate
  ge: GraphbackDate
  gt: GraphbackDate
  in: [GraphbackDate!]
  between: [GraphbackDate!]
}

scalar GraphbackObjectID

input GraphbackObjectIDInput {
  ne: GraphbackObjectID
  eq: GraphbackObjectID
  le: GraphbackObjectID
  lt: GraphbackObjectID
  ge: GraphbackObjectID
  gt: GraphbackObjectID
  in: [GraphbackObjectID!]
  between: [GraphbackObjectID!]
}

scalar GraphbackTime

input GraphbackTimeInput {
  ne: GraphbackTime
  eq: GraphbackTime
  le: GraphbackTime
  lt: GraphbackTime
  ge: GraphbackTime
  gt: GraphbackTime
  in: [GraphbackTime!]
  between: [GraphbackTime!]
}

input MutateDayInput {
  _id: GraphbackObjectID!
  date: GraphbackDate
}

input MutateTimeSlotInput {
  _id: GraphbackObjectID!
  startTime: GraphbackTime
  endTime: GraphbackTime
  note: String
  free: Boolean
  clientName: String
  dateId: GraphbackObjectID
}

"""
type Query {
  getWeekSchedule(date: GraphbackDate): [Day]
  getDaySchedule(date: GraphbackDate): Day
}
"""
type Mutation {
  createDaySchedule(input: CreateDayScheduleInput!): Day
  createTimeSlot(input: CreateTimeSlotInput!): TimeSlot
  updateTimeSlot(input: MutateTimeSlotInput!): TimeSlot
  deleteTimeSlot(input: MutateTimeSlotInput!): TimeSlot
  createDay(input: CreateDayInput!): Day
  updateDay(input: MutateDayInput!): Day
  deleteDay(input: MutateDayInput!): Day
}

input OrderByInput {
  field: String!
  order: SortDirectionEnum = ASC
}

input PageRequest {
  limit: Int
  offset: Int
}

type Query {
  getTimeSlot(id: GraphbackObjectID!): TimeSlot
  findTimeSlots(filter: TimeSlotFilter, page: PageRequest, orderBy: OrderByInput): TimeSlotResultList!
  getDay(id: GraphbackObjectID!): Day
  findDays(filter: DayFilter, page: PageRequest, orderBy: OrderByInput): DayResultList!
}

enum SortDirectionEnum {
  DESC
  ASC
}

input StringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  in: [String!]
  contains: String
  startsWith: String
  endsWith: String
}

type Subscription {
  newTimeSlot(filter: TimeSlotSubscriptionFilter): TimeSlot!
  updatedTimeSlot(filter: TimeSlotSubscriptionFilter): TimeSlot!
  deletedTimeSlot(filter: TimeSlotSubscriptionFilter): TimeSlot!
  newDay(filter: DaySubscriptionFilter): Day!
  updatedDay(filter: DaySubscriptionFilter): Day!
  deletedDay(filter: DaySubscriptionFilter): Day!
}

""" @model """
type TimeSlot {
  _id: GraphbackObjectID!
  startTime: GraphbackTime
  endTime: GraphbackTime
  note: String
  free: Boolean
  clientName: String

  """@manyToOne(field: 'slots', key: 'dateId')"""
  date: Day
}

input TimeSlotFilter {
  _id: GraphbackObjectIDInput
  startTime: GraphbackTimeInput
  endTime: GraphbackTimeInput
  note: StringInput
  free: BooleanInput
  clientName: StringInput
  dateId: GraphbackObjectIDInput
  and: [TimeSlotFilter!]
  or: [TimeSlotFilter!]
  not: TimeSlotFilter
}

type TimeSlotResultList {
  items: [TimeSlot]!
  offset: Int
  limit: Int
  count: Int
}

input TimeSlotSubscriptionFilter {
  and: [TimeSlotSubscriptionFilter!]
  or: [TimeSlotSubscriptionFilter!]
  not: TimeSlotSubscriptionFilter
  _id: GraphbackObjectIDInput
  startTime: GraphbackTimeInput
  endTime: GraphbackTimeInput
  note: StringInput
  free: BooleanInput
  clientName: StringInput
}